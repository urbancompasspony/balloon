#!/bin/bash

# auto-ballooning
# By UrbanCompassPony

# ---------------------------------------------------------------------------- #
# mem00 actual - balloon
# mem01 available = usable (What balloon can take without swap)
# mem02 free = unused
# mem03 total (used + free + buff/cache) = available
# ---------------------------------------------------------------------------- #

# Adjust this to the minimal amount of Usable RAM
# Default is 25
minimal="25" # in %

#Adjust this to the maximum amount of Usable RAM
# Default is 35
maximal="35" # in %

# Change this to how much RAM the Balloon gonna remove or add to VM
# Default if 50
addram="50" # In Mb

# Change this to a value, in seconds, the loop will run the script!
# Default is 2
secs="2"

# Change 0 to 1 to turn ON debug mode. 
# Remember: When set to 1, the loop will turn OFF too.
# Default if 0
debug="1"

function start {
  [ $(which virt-manager 2>/dev/null) ] && {

  for i in $(virsh list --all | grep "running" | awk '{print $2}'); do
    virsh dommemstat "$i" --period 1 

    mem00=$(virsh dommemstat "$i" | awk 'NR==1 { print $2 }')
    mem01=$(virsh dommemstat "$i" | awk 'NR==8 { print $2 }')

    mem0A=$(bc <<< "$mem00/1024")
    mem0B=$(bc <<< "$mem01/1024")

    percent=$(bc <<< "$mem0A/100")
    result=$(bc <<< "$mem0B/$percent")

    osinfo=$(virsh dumpxml "$i" | grep "microsoft" 1> /dev/null 2> /dev/null && echo "sim" || echo "nao")

    [ "$osinfo" = "nao" ] && {
      [ "$result" -ge "$maximal" ] && {
        memX=$(bc <<< "$mem0A"-"$addram")
        virsh setmem "$i" "$memX"mb
        }

      [ "$result" -le "$minimal" ] && {
        memX=$(bc <<< "$mem0A"+"$addram")
        virsh setmem "$i" "$memX"mb
        }
    }
    [ "$debug" = "1" ] && {
      echo "VM Name: $i"
      echo "actual: $mem00 Kb"
      echo "usable: $mem01 Kb"
      echo "actual: $mem0A Mb"
      echo "usable: $mem0B Mb"
      echo "actual/100: $percent"
      echo "[usable / (actual/100)]: $result % of $mem0A"
      [ "$osinfo" = "sim" ] && {
        echo "
ERROR: We do not cover Windows yet. WIP!"
        }
      }

  done
  }
}

[ "$debug" = "0" ] && {
while true; do
  sleep "$secs";
  start
done
}

[ "$debug" = "1" ] && {
  start
}
