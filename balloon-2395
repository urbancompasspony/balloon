#!/bin/bash

########################
# auto-ballooning      #
# By UrbanCompassPony  #
########################

##############
# Parameters #
##############

# Control of minimal amount of usable RAM
# Default is 25 - Value in %
minimal="25"

# Control of maximum amount of Usable RAM
# Default is 35 - Value in %
maximal="35"

# Control of Dead Volume
# Change critical to how much will remain in RAM at lowest level.
# Change ccritical to 0 to turn OFF Dead Volume. Debug purposes only!
# Default: 270 - Value in Megabytes
# Default is 1
critical="270"
ccontrol="1"

# Control of how much RAM the Balloon gonna add to VM at time.
# Higher the value, fast RAM will increase.
# Default is 150 - Value in Megabytes
addram="200"

# Control of how much RAM the Balloon gonna remove from VM at time.
# Higher the value, fast RAM will decrease. Danger if high!
# Default is 50 - Value in Megabytes
rmram="50"

# Control of how much time loop takes to re-run!
# Default is 0.5 - Value in Seconds
secs="0.5"

# Control of Debug Mode
# Change from 0 to 1 to turn ON!
# Default is 0
debug="0"

#####################
# # # Functions # # #
#####################

function start {
  memX=0
  
  [ $(which virt-manager 2>/dev/null) ] && {

  for i in $(virsh list --all | grep "running" | awk '{print $2}'); do
    virsh -q dommemstat "$i" --period 1 

    mem00=$(virsh dommemstat "$i" | awk 'NR==1 { print $2 }'); mem0A=$(bc <<< "$mem00/1024")
    mem01=$(virsh dommemstat "$i" | awk 'NR==8 { print $2 }'); mem0B=$(bc <<< "$mem01/1024")

    percent=$(bc <<< "scale=2;$mem0A/100"); resultA=$(bc <<< "scale=2;$mem0B/$percent")
    result=$(echo "$resultA" | cut -d "." -f1); [ "$result" = "" ] && { result=$(bc <<< "$mem0B/$percent"); }

    osinfo=$(virsh dumpxml "$i" | grep "microsoft" 1> /dev/null 2> /dev/null && echo "y" || echo "n")

    [ "$osinfo" = "n" ] && {

      [ $(echo "$result > $maximal" | bc) -gt 0 ] && {
      memX=$(bc <<< "$mem0A"-"$rmram")
        [ "$ccontrol" = "1" ] && {
          [ "$memX" = "0" ] || { 
            [ $(echo "$memX < $critical" | bc) -gt 0 ] && {
              [ "$debug" = "1" ] && { echo "Critical! Doing nothing."; } || { echo "Nothing." > /dev/null; }
            } || { virsh -q setmem "$i" "$memX"mb; }
          } || { virsh -q setmem "$i" "$memX"mb; }
        }
      }

      [ $(echo "$result < $minimal" | bc) -gt 0 ] && { memX=$(bc <<< "$mem0A"+"$addram"); virsh -q setmem "$i" "$memX"mb; }
    }

    [ "$debug" = "1" ] && {
      [ "$osinfo" = "y" ] && {
        echo "ERROR: We do not cover Windows yet. WIP!"
      } || {
        echo "-----------------------------------------------------"
        echo "| VM Name: $i                                        "
        echo "| actual: $mem00 Kb  / usable: $mem01 Kb             "
        echo "| [usable: $mem0B Mb / ( actual: $mem0A Mb / 100 ) ] "
        echo "| Usable is $result % of actual $mem0A!              "
        echo "| How much the RAM is going to be: $memX Mb          "
        echo "-----------------------------------------------------"    
        [ "$memX" = "0" ] || { [ $(echo "$memX < $critical" | bc) -gt 0 ] && { echo "Critical! Freezing value: $memX"; }; }
      }
    }
  done
  }
}

# Starting...
while true; do
  start
  sleep "$secs"
done
